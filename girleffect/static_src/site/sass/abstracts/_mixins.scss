/*------------------------------------*\
    $MIXINS
\*------------------------------------*/




/* ============================================
    Media Query mixin
*/

@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in $breakpoints {
            $name:        nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}


/* ============================================
  Placeholder text
*/

@mixin placeholder-text {
    // sass-lint:disable no-vendor-prefixes
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
    // sass-lint:enddisable
};


/* ============================================
  iOS Native vertical scroll
*/

@mixin native-vertical-scroll {
    position: relative; // Ensures container is considered the offsetParent() in JS
    overflow-y: scroll;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch; // sass-lint:disable-line no-misspelled-properties
}


/* ============================================
   Aligner: placeholder class used to align
   components at the template-level
   For want of a better place to put this I've left it here:
*/

@mixin aligner {
    max-width: $max-width;
    margin: 0 auto;
}


/* ============================================
   Gutter spacing
*/
@mixin gutter($top: 0.5, $right: 0.5, $bottom: 0.5, $left: 0.5) {

    @if $top > 0 {
        padding-top: $gutter--mobile * $top;
        @include media-query(tablet-portrait) {
            padding-top: $gutter--tablet * $top;
        }
        @include media-query(desktop) {
            padding-top: $gutter--desktop * $top;
        }
        @include media-query(desktop-wide) {
            padding-top: $gutter--desktop-wide * $top;
        }
    }

    @if $bottom > 0 {
        padding-bottom: $gutter--mobile * $bottom;
        @include media-query(tablet-portrait) {
            padding-bottom: $gutter--tablet * $bottom;
        }
        @include media-query(desktop) {
            padding-bottom: $gutter--desktop * $bottom;
        }
        @include media-query(desktop-wide) {
            padding-bottom: $gutter--desktop-wide * $bottom;
        }
    }

    @if $right > 0 {
        padding-right: $gutter--mobile * $right;
        @include media-query(tablet-portrait) {
            padding-right: $gutter--tablet * $right;
        }
        @include media-query(desktop) {
            padding-right: $gutter--desktop * $right;
        }
        @include media-query(desktop-wide) {
            padding-right: $gutter--desktop-wide * $right;
        }
    }

    @if $left > 0 {
        padding-left: $gutter--mobile * $left;
        @include media-query(tablet-portrait) {
            padding-left: $gutter--tablet * $left;
        }
        @include media-query(desktop) {
            padding-left: $gutter--desktop * $left;
        }
        @include media-query(desktop-wide) {
            padding-left: $gutter--desktop-wide * $left;
        }
    }
}

/* ============================================
   Viewport sized typography mixin that takes a min and max pixel-based value
*/
@mixin font-size($min, $max) {

    $vw-context: (1260 * 0.1) * 1px;
    $responsive: ($max / $vw-context) * 10vw;

    $responsive-unitless: $responsive / ($responsive - $responsive + 1);
    $dimension: if(unit($responsive) == 'vh', 'height', 'width');
    $min-breakpoint: $min / $responsive-unitless * 100;

    @media (max-#{$dimension}: #{$min-breakpoint}) {
        font-size: $min;
    }

    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
        font-size: $max;
    }

    font-size: $responsive;
}
